"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "MakerWixConfig", {
    enumerable: true,
    get: function() {
        return _config.MakerWixConfig;
    }
});
exports.default = void 0;
var _makerBase = _interopRequireDefault(require("@electron-forge/maker-base"));
var _chalk = _interopRequireDefault(require("chalk"));
var _logSymbols = _interopRequireDefault(require("log-symbols"));
var _path = _interopRequireDefault(require("path"));
var _creator = require("electron-wix-msi/lib/creator");
var _authorName = _interopRequireDefault(require("./util/author-name"));
var _config = require("./Config");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
class MakerWix extends _makerBase.default {
    isSupportedOnCurrentPlatform() {
        return process.platform === 'win32';
    }
    async make({ dir , makeDir , targetArch , packageJSON , appName  }) {
        const outPath = _path.default.resolve(makeDir, `wix/${targetArch}`);
        await this.ensureDirectory(outPath);
        let { version  } = packageJSON;
        if (version.includes('-')) {
            // eslint-disable-next-line no-console
            console.warn(_logSymbols.default.warning, _chalk.default.yellow('WARNING: WiX distributables do not handle prerelease information in the app version, removing it from the MSI'));
            version = this.normalizeWindowsVersion(version);
        }
        const creator = new _creator.MSICreator({
            description: packageJSON.description,
            name: appName,
            version,
            manufacturer: (0, _authorName).default(packageJSON.author),
            exe: `${appName}.exe`,
            ...this.config,
            appDirectory: dir,
            outputDirectory: outPath
        });
        if (this.config.beforeCreate) {
            await Promise.resolve(this.config.beforeCreate(creator));
        }
        await creator.create();
        const { msiFile  } = await creator.compile();
        return [
            msiFile
        ];
    }
    constructor(...args){
        super(...args);
        this.name = 'wix';
        this.defaultPlatforms = [
            'win32'
        ];
    }
}
exports.default = MakerWix;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9NYWtlcldpeC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTWFrZXJCYXNlLCB7IE1ha2VyT3B0aW9ucyB9IGZyb20gJ0BlbGVjdHJvbi1mb3JnZS9tYWtlci1iYXNlJztcbmltcG9ydCB7IEZvcmdlUGxhdGZvcm0gfSBmcm9tICdAZWxlY3Ryb24tZm9yZ2Uvc2hhcmVkLXR5cGVzJztcblxuaW1wb3J0IGNoYWxrIGZyb20gJ2NoYWxrJztcbmltcG9ydCBsb2dTeW1ib2xzIGZyb20gJ2xvZy1zeW1ib2xzJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuXG5pbXBvcnQgeyBNU0lDcmVhdG9yLCBNU0lDcmVhdG9yT3B0aW9ucyB9IGZyb20gJ2VsZWN0cm9uLXdpeC1tc2kvbGliL2NyZWF0b3InO1xuaW1wb3J0IGdldE5hbWVGcm9tQXV0aG9yIGZyb20gJy4vdXRpbC9hdXRob3ItbmFtZSc7XG5cbmltcG9ydCB7IE1ha2VyV2l4Q29uZmlnIH0gZnJvbSAnLi9Db25maWcnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNYWtlcldpeCBleHRlbmRzIE1ha2VyQmFzZTxNYWtlcldpeENvbmZpZz4ge1xuICBuYW1lID0gJ3dpeCc7XG5cbiAgZGVmYXVsdFBsYXRmb3JtczogRm9yZ2VQbGF0Zm9ybVtdID0gWyd3aW4zMiddO1xuXG4gIGlzU3VwcG9ydGVkT25DdXJyZW50UGxhdGZvcm0oKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHByb2Nlc3MucGxhdGZvcm0gPT09ICd3aW4zMic7XG4gIH1cblxuICBhc3luYyBtYWtlKHsgZGlyLCBtYWtlRGlyLCB0YXJnZXRBcmNoLCBwYWNrYWdlSlNPTiwgYXBwTmFtZSB9OiBNYWtlck9wdGlvbnMpOiBQcm9taXNlPHN0cmluZ1tdPiB7XG4gICAgY29uc3Qgb3V0UGF0aCA9IHBhdGgucmVzb2x2ZShtYWtlRGlyLCBgd2l4LyR7dGFyZ2V0QXJjaH1gKTtcbiAgICBhd2FpdCB0aGlzLmVuc3VyZURpcmVjdG9yeShvdXRQYXRoKTtcblxuICAgIGxldCB7IHZlcnNpb24gfSA9IHBhY2thZ2VKU09OO1xuICAgIGlmICh2ZXJzaW9uLmluY2x1ZGVzKCctJykpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgIGxvZ1N5bWJvbHMud2FybmluZyxcbiAgICAgICAgY2hhbGsueWVsbG93KCdXQVJOSU5HOiBXaVggZGlzdHJpYnV0YWJsZXMgZG8gbm90IGhhbmRsZSBwcmVyZWxlYXNlIGluZm9ybWF0aW9uIGluIHRoZSBhcHAgdmVyc2lvbiwgcmVtb3ZpbmcgaXQgZnJvbSB0aGUgTVNJJylcbiAgICAgICk7XG4gICAgICB2ZXJzaW9uID0gdGhpcy5ub3JtYWxpemVXaW5kb3dzVmVyc2lvbih2ZXJzaW9uKTtcbiAgICB9XG5cbiAgICBjb25zdCBjcmVhdG9yID0gbmV3IE1TSUNyZWF0b3Ioe1xuICAgICAgZGVzY3JpcHRpb246IHBhY2thZ2VKU09OLmRlc2NyaXB0aW9uLFxuICAgICAgbmFtZTogYXBwTmFtZSxcbiAgICAgIHZlcnNpb24sXG4gICAgICBtYW51ZmFjdHVyZXI6IGdldE5hbWVGcm9tQXV0aG9yKHBhY2thZ2VKU09OLmF1dGhvciksXG4gICAgICBleGU6IGAke2FwcE5hbWV9LmV4ZWAsXG4gICAgICAuLi50aGlzLmNvbmZpZyxcbiAgICAgIGFwcERpcmVjdG9yeTogZGlyLFxuICAgICAgb3V0cHV0RGlyZWN0b3J5OiBvdXRQYXRoLFxuICAgIH0gYXMgTVNJQ3JlYXRvck9wdGlvbnMpO1xuXG4gICAgaWYgKHRoaXMuY29uZmlnLmJlZm9yZUNyZWF0ZSkge1xuICAgICAgYXdhaXQgUHJvbWlzZS5yZXNvbHZlKHRoaXMuY29uZmlnLmJlZm9yZUNyZWF0ZShjcmVhdG9yKSk7XG4gICAgfVxuICAgIGF3YWl0IGNyZWF0b3IuY3JlYXRlKCk7XG4gICAgY29uc3QgeyBtc2lGaWxlIH0gPSBhd2FpdCBjcmVhdG9yLmNvbXBpbGUoKTtcblxuICAgIHJldHVybiBbbXNpRmlsZV07XG4gIH1cbn1cblxuZXhwb3J0IHsgTWFrZXJXaXhDb25maWcgfTtcbiJdLCJuYW1lcyI6WyJNYWtlcldpeENvbmZpZyIsIk1ha2VyV2l4IiwiTWFrZXJCYXNlIiwiaXNTdXBwb3J0ZWRPbkN1cnJlbnRQbGF0Zm9ybSIsInByb2Nlc3MiLCJwbGF0Zm9ybSIsIm1ha2UiLCJkaXIiLCJtYWtlRGlyIiwidGFyZ2V0QXJjaCIsInBhY2thZ2VKU09OIiwiYXBwTmFtZSIsIm91dFBhdGgiLCJwYXRoIiwicmVzb2x2ZSIsImVuc3VyZURpcmVjdG9yeSIsInZlcnNpb24iLCJpbmNsdWRlcyIsImNvbnNvbGUiLCJ3YXJuIiwibG9nU3ltYm9scyIsIndhcm5pbmciLCJjaGFsayIsInllbGxvdyIsIm5vcm1hbGl6ZVdpbmRvd3NWZXJzaW9uIiwiY3JlYXRvciIsIk1TSUNyZWF0b3IiLCJkZXNjcmlwdGlvbiIsIm5hbWUiLCJtYW51ZmFjdHVyZXIiLCJnZXROYW1lRnJvbUF1dGhvciIsImF1dGhvciIsImV4ZSIsImNvbmZpZyIsImFwcERpcmVjdG9yeSIsIm91dHB1dERpcmVjdG9yeSIsImJlZm9yZUNyZWF0ZSIsIlByb21pc2UiLCJjcmVhdGUiLCJtc2lGaWxlIiwiY29tcGlsZSIsImRlZmF1bHRQbGF0Zm9ybXMiXSwibWFwcGluZ3MiOiI7Ozs7K0JBd0RTQSxDQUFjOzs7ZUFBZEEsT0FBYzs7OztBQXhEaUIsR0FBNEIsQ0FBNUIsVUFBNEI7QUFHbEQsR0FBTyxDQUFQLE1BQU87QUFDRixHQUFhLENBQWIsV0FBYTtBQUNuQixHQUFNLENBQU4sS0FBTTtBQUV1QixHQUE4QixDQUE5QixRQUE4QjtBQUM5QyxHQUFvQixDQUFwQixXQUFvQjtBQUVuQixHQUFVLENBQVYsT0FBVTs7Ozs7O01BRXBCQyxRQUFRLFNBQVNDLFVBQVM7SUFLN0NDLDRCQUE0QixHQUFZLENBQUM7UUFDdkMsTUFBTSxDQUFDQyxPQUFPLENBQUNDLFFBQVEsS0FBSyxDQUFPO0lBQ3JDLENBQUM7VUFFS0MsSUFBSSxDQUFDLENBQUMsQ0FBQ0MsR0FBRyxHQUFFQyxPQUFPLEdBQUVDLFVBQVUsR0FBRUMsV0FBVyxHQUFFQyxPQUFPLEVBQWUsQ0FBQyxFQUFxQixDQUFDO1FBQy9GLEtBQUssQ0FBQ0MsT0FBTyxHQUFHQyxLQUFJLFNBQUNDLE9BQU8sQ0FBQ04sT0FBTyxHQUFHLElBQUksRUFBRUMsVUFBVTtRQUN2RCxLQUFLLENBQUMsSUFBSSxDQUFDTSxlQUFlLENBQUNILE9BQU87UUFFbEMsR0FBRyxDQUFDLENBQUMsQ0FBQ0ksT0FBTyxFQUFDLENBQUMsR0FBR04sV0FBVztRQUM3QixFQUFFLEVBQUVNLE9BQU8sQ0FBQ0MsUUFBUSxDQUFDLENBQUcsS0FBRyxDQUFDO1lBQzFCLEVBQXNDLEFBQXRDLG9DQUFzQztZQUN0Q0MsT0FBTyxDQUFDQyxJQUFJLENBQ1ZDLFdBQVUsU0FBQ0MsT0FBTyxFQUNsQkMsTUFBSyxTQUFDQyxNQUFNLENBQUMsQ0FBK0c7WUFFOUhQLE9BQU8sR0FBRyxJQUFJLENBQUNRLHVCQUF1QixDQUFDUixPQUFPO1FBQ2hELENBQUM7UUFFRCxLQUFLLENBQUNTLE9BQU8sR0FBRyxHQUFHLENBQUNDLFFBQVUsWUFBQyxDQUFDO1lBQzlCQyxXQUFXLEVBQUVqQixXQUFXLENBQUNpQixXQUFXO1lBQ3BDQyxJQUFJLEVBQUVqQixPQUFPO1lBQ2JLLE9BQU87WUFDUGEsWUFBWSxNQUFFQyxXQUFpQixVQUFDcEIsV0FBVyxDQUFDcUIsTUFBTTtZQUNsREMsR0FBRyxLQUFLckIsT0FBTyxDQUFDLElBQUk7ZUFDakIsSUFBSSxDQUFDc0IsTUFBTTtZQUNkQyxZQUFZLEVBQUUzQixHQUFHO1lBQ2pCNEIsZUFBZSxFQUFFdkIsT0FBTztRQUMxQixDQUFDO1FBRUQsRUFBRSxFQUFFLElBQUksQ0FBQ3FCLE1BQU0sQ0FBQ0csWUFBWSxFQUFFLENBQUM7WUFDN0IsS0FBSyxDQUFDQyxPQUFPLENBQUN2QixPQUFPLENBQUMsSUFBSSxDQUFDbUIsTUFBTSxDQUFDRyxZQUFZLENBQUNYLE9BQU87UUFDeEQsQ0FBQztRQUNELEtBQUssQ0FBQ0EsT0FBTyxDQUFDYSxNQUFNO1FBQ3BCLEtBQUssQ0FBQyxDQUFDLENBQUNDLE9BQU8sRUFBQyxDQUFDLEdBQUcsS0FBSyxDQUFDZCxPQUFPLENBQUNlLE9BQU87UUFFekMsTUFBTSxDQUFDLENBQUNEO1lBQUFBLE9BQU87UUFBQSxDQUFDO0lBQ2xCLENBQUM7OztRQXpDWSxJQTBDZCxDQXpDQ1gsSUFBSSxHQUFHLENBQUs7UUFEQyxJQTBDZCxDQXZDQ2EsZ0JBQWdCLEdBQW9CLENBQUM7WUFBQSxDQUFPO1FBQUEsQ0FBQzs7O2tCQUgxQnhDLFFBQVEifQ==